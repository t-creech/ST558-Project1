---
title: "Reading Delimited Data"
format: html
toc: TRUE
editor_options: 
  chunk_output_type: inline
---


# Glass Data
## Problem 1

First, we will need to read in the data. Looking at the data available at the URL, it appears to be comma delimited. Therefore, we can simply use read_csv.

```{R}
library(tidyverse)
```

```{R}
data_tbl <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data", col_names = c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "TypeGlass"))

data_tbl
```

## Problem 2 and 3
Now, we can chain together a mutate function and filter to rename the values of the last column and filter to the desired data:

```{R}
filtered_mapped_data <- data_tbl |> 
  mutate(TypeGlass = 
    ifelse(TypeGlass == 1, "building_windows_float_processed", 
    ifelse(TypeGlass == 2, "building_windows_non_float_processed",
    ifelse(TypeGlass == 3, "vehicle_windows_float_processed",
    ifelse(TypeGlass == 4, "vehicle_windows_non_float_processed",
    ifelse(TypeGlass == 5, "containers",
    ifelse(TypeGlass == 6, "tableware", "headlamps"))))))) |>
  filter(Fe < 0.2, (TypeGlass %in% c("tableware", "headlamps")))
  
filtered_mapped_data

```


# Yeast Data
## Problem 1
First we read in the data. Here it appears to be fixed field data, so we will use read_table:
```{R}
yeast_data_tbl <- read_table("https://www4.stat.ncsu.edu/~online/datasets/yeast.data", col_names = c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class"))

yeast_data_tbl
```

## Problems 2 and 3
For the first part, we can simply select all columns except seq_name and nuc. Next, we can chain that output into a group_by and a mutate across those groups to add in the mean and median for each numeric field.
```{R}
yeast_data_group <- yeast_data_tbl |>
  select(-seq_name, -nuc) |>
  group_by(class) |>
  mutate(across(where(is.numeric), list(mean = mean, median = median)))

yeast_data_group
```